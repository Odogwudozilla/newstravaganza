<style>
  #map {
    height: 800px;
    width: 100%;
  }

  .controls {
    z-index: 20px;
    positioning: relative;
  }
</style>



<div id="controls" class="nicebox">
  <div>
    <select id="news-variable">
      <option value="/country.json">Number of Sources</option>

    </select>
  </div>
  <div id="legend">
    <div id="news-min">min</div>
    <div class="color-key"><span id="data-caret">&#x25c6;</span></div>
    <div id="news-max">max</div>
  </div>
</div>
<div id="data-box" class="nicebox">
  <label id="data-label" for="data-value"></label>
  <span id="data-value"></span>
</div>


<div id="map"></div>




<script>
  var mapStyle = [{
    'stylers': [{ 'visibility': 'off' }]
  }, {
    'featureType': 'landscape',
    'elementType': 'geometry',
    'stylers': [{ 'visibility': 'on' }, { 'color': '#fcfcfc' }]
  }, {
    'featureType': 'water',
    'elementType': 'geometry',
    'stylers': [{ 'visibility': 'on' }, { 'color': '#bfd4ff' }]
  }];
  var map;
  var newsMin = Number.MAX_VALUE, newsMax = -Number.MAX_VALUE;

  function initMap() {

    // load the map
    map = new google.maps.Map(document.getElementById('map'), {
      center: { lat: 40, lng: -90 },
      zoom: 2,
      styles: mapStyle
    });


    // set up the style rules and events for google.maps.Data
    map.data.setStyle(styleFeature);
    map.data.addListener('mouseover', mouseInToRegion);
    map.data.addListener('mouseout', mouseOutOfRegion);

    // wire up the button
    var selectBox = document.getElementById('news-variable');
    google.maps.event.addDomListener(selectBox, 'change', function () {
      clearNewsData();
      loadNewsData(selectBox.options[selectBox.selectedIndex].value);
    });

    // state polygons only need to be loaded once, do them now
    loadMapShapes();

  }

  /** Loads the state boundary polygons from a GeoJSON source. */
  function loadMapShapes() {
    // load US state outline polygons from a GeoJson file
    map.data.loadGeoJson('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json', { idPropertyName: 'name' });


    // wait for the request to complete by listening for the first feature to be
    // added
    google.maps.event.addListenerOnce(map.data, 'addfeature', function () {
      google.maps.event.trigger(document.getElementById('news-variable'),
        'change');
    });
  }

  /**
   * Loads the census data from a simulated API call to the US Census API.
   *
   * @param {string} variable
   */
  function loadNewsData(variable) {
    // load the requested variable from the census API (using local copies)
    console.log(variable)

    var xhr = new XMLHttpRequest();
    xhr.open('GET', variable + '.json');
    xhr.onload = function () {
      //var newsData = JSON.parse(JSON.stringify(xhr.responseText));
      var newsData = JSON.parse(xhr.responseText);
      console.log(newsData)
      /*  var newsData = xhr.responseText */
      newsData.shift(); // the first row contains column names */
      newsData.forEach(function (row) {
        var newsVariable = parseFloat(row[0]);

        var countryId = row[1];

        // keep track of min and max values
        if (newsVariable < newsMin) {
          newsMin = newsVariable;
        }
        if (newsVariable > newsMax) {
          newsMax = newsVariable;
        }






        // update the existing row with the new data
        if (typeof (map.data.getFeatureById(countryId)) != "undefined") {
          map.data
            .getFeatureById(countryId)
            .setProperty('news_variable', newsVariable);
        }
      });

      // update and display the legend
      document.getElementById('news-min').textContent =
        newsMin.toLocaleString();
      document.getElementById('news-max').textContent =
        newsMax.toLocaleString();
    };
    xhr.send();
  }









  /** Removes census data from each shape on the map and resets the UI. */
  function clearNewsData() {
    newsMin = Number.MAX_VALUE;
    newsMax = -Number.MAX_VALUE;
    map.data.forEach(function (row) {
      row.setProperty('news_variable', undefined);
    });
    document.getElementById('data-box').style.display = 'none';
    document.getElementById('data-caret').style.display = 'none';
  }

  /**
   * Applies a gradient style based on the 'census_variable' column.
   * This is the callback passed to data.setStyle() and is called for each row in
   * the data set.  Check out the docs for Data.StylingFunction.
   *
   * @param {google.maps.Data.Feature} feature
   */
  function styleFeature(feature) {
    var low = [5, 69, 54];  // color of smallest datum
    var high = [151, 83, 34];   // color of largest datum

    // delta represents where the value sits between the min and max
    var delta = (feature.getProperty('news_variable') - newsMin) /
      (newsMax - newsMin);

    var color = [];
    for (var i = 0; i < 3; i++) {
      // calculate an integer color based on the delta
      color[i] = (high[i] - low[i]) * delta + low[i];
    }

    // determine whether to show this shape or not
    var showRow = true;
    if (feature.getProperty('news_variable') == null ||
      isNaN(feature.getProperty('news_variable'))) {
      showRow = false;
    }

    var outlineWeight = 0.5, zIndex = 1;
    if (feature.getProperty('country') === 'hover') {
      outlineWeight = zIndex = 2;
    }

    return {
      strokeWeight: outlineWeight,
      strokeColor: '#fff',
      zIndex: zIndex,
      fillColor: 'hsl(' + color[0] + ',' + color[1] + '%,' + color[2] + '%)',
      fillOpacity: 0.75,
      visible: showRow
    };
  }

  /**
   * Responds to the mouse-in event on a map shape (state).
   *
   * @param {?google.maps.MouseEvent} e
   */
  function mouseInToRegion(e) {
    // set the hover state so the setStyle function can change the border
    e.feature.setProperty('id', 'hover');

    var percent = (e.feature.getProperty('news_variable') - newsMin) /
      (newsMax - newsMin) * 100;

    // update the label
    document.getElementById('data-label').textContent =
      e.feature.getProperty('name');
    document.getElementById('data-value').textContent =
      e.feature.getProperty('news_variable').toLocaleString();
    document.getElementById('data-box').style.display = 'block';
    document.getElementById('data-caret').style.display = 'block';
    document.getElementById('data-caret').style.paddingLeft = percent + '%';
  }

  /**
   * Responds to the mouse-out event on a map shape (state).
   *
   * @param {?google.maps.MouseEvent} e
   */
  function mouseOutOfRegion(e) {
    // reset the hover state, returning the border to normal
    e.feature.setProperty('country', 'normal');
  }

</script>



<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAgpxfoaa82kx8UOuus2o7y-mEuJz91Ijk&callback=initMap"></script>